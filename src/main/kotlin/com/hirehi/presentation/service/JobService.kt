package com.hirehi.presentation.service

import com.hirehi.data.repository.ArchiveRepositoryImpl
import com.hirehi.data.remote.HireHiScraper
import com.hirehi.data.repository.JobRepositoryImpl
import com.hirehi.domain.model.ArchivedJob
import com.hirehi.domain.model.Job
import com.hirehi.domain.model.JobSearchParams
import com.hirehi.domain.model.JobStatistics
import com.hirehi.domain.usecase.GetArchivedJobsUseCase
import com.hirehi.domain.usecase.GetJobsUseCase
import com.hirehi.presentation.view.ArchiveView
import com.hirehi.presentation.view.JobView
import java.io.File
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

class JobService {
    
    private val scraper = HireHiScraper()
    private val repository = JobRepositoryImpl(scraper)
    private val getJobsUseCase = GetJobsUseCase(repository)
    private val jobView = JobView()
    private val archiveView = ArchiveView()
    private val archiveRepository = ArchiveRepositoryImpl()
    private val getArchivedJobsUseCase = GetArchivedJobsUseCase(archiveRepository)

    suspend fun loadAndSaveJobs(searchParams: JobSearchParams): JobStatistics {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        val allJobs = scraper.getAllJobs()
        val totalJobs = allJobs.size
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        val filteredJobs = scraper.filterJobsByKeywords(allJobs, searchParams.keywords)
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        val statistics = JobStatistics(
            totalJobs = totalJobs,
            filteredJobs = filteredJobs.size,
            lastUpdated = LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME),
            keywords = searchParams.keywords
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        saveJobsToJson(filteredJobs, statistics, "hirehi_filtered_jobs.json")
        return statistics
    }

    suspend fun generateHtmlPage(jobs: List<Job>, statistics: JobStatistics? = null): String {
        val archiveCount = getArchiveCount()
        return jobView.generateHtmlPage(jobs, statistics, archiveCount)
    }
    
    fun generateArchivePage(archivedJobs: List<ArchivedJob>): String {
        return archiveView.generateArchivePage(archivedJobs)
    }

    fun saveHtmlToFile(html: String, filename: String = "jobs_display.html") {
        File(filename).writeText(html, Charsets.UTF_8)
    }

    fun loadJobsFromJson(): Pair<List<Job>, JobStatistics?> {
        return try {
            val jsonFile = File("hirehi_filtered_jobs.json")
            if (!jsonFile.exists()) {
                println("‚ö†Ô∏è JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                return Pair(emptyList(), null)
            }

            val jsonText = jsonFile.readText()
            val jsonObject = org.json.JSONObject(jsonText)
            val jsonArray = jsonObject.getJSONArray("jobs")
            val jobs = mutableListOf<Job>()

            for (i in 0 until jsonArray.length()) {
                val jobJson = jsonArray.getJSONObject(i)
                val job = parseJobFromJson(jobJson)
                if (job != null) {
                    jobs.add(job)
                }
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            val statistics = if (jsonObject.has("statistics")) {
                val statsJson = jsonObject.getJSONObject("statistics")
                JobStatistics(
                    totalJobs = statsJson.getInt("totalJobs"),
                    filteredJobs = statsJson.getInt("filteredJobs"),
                    lastUpdated = statsJson.getString("lastUpdated"),
                    keywords = statsJson.getJSONArray("keywords").let { array ->
                        (0 until array.length()).map { array.getString(it) }
                    }
                )
            } else null

            println("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${jobs.size} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞")
            Pair(jobs, statistics)
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON: ${e.message}")
            Pair(emptyList(), null)
        }
    }

    suspend fun loadJobsFromJsonExcludingArchived(): Pair<List<Job>, JobStatistics?> {
        val (allJobs, statistics) = loadJobsFromJson()
        
        return try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID
            val archivedJobs = getArchivedJobsUseCase.execute(10000, 0) // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            val archivedIds = archivedJobs.map { it.id }.toSet()
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏, –∏—Å–∫–ª—é—á–∞—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            val filteredJobs = allJobs.filter { job -> job.id !in archivedIds }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            val updatedStatistics = statistics?.copy(
                filteredJobs = filteredJobs.size
            )
            
            println("üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${allJobs.size - filteredJobs.size} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
            Pair(filteredJobs, updatedStatistics)
        } catch (e: Exception) {
            println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: ${e.message}")
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            Pair(allJobs, statistics)
        }
    }

    suspend fun getArchiveCount(): Int {
        return try {
            val archivedJobs = getArchivedJobsUseCase.execute(10000, 0)
            archivedJobs.size
        } catch (e: Exception) {
            println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: ${e.message}")
            0
        }
    }

    private fun parseJobFromJson(jobJson: org.json.JSONObject): Job? {
        return try {
            val id = jobJson.get("id").toString()
            val title = jobJson.optString("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            val company = if (jobJson.has("company") && !jobJson.isNull("company")) {
                jobJson.getString("company")
            } else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            val salary = if (jobJson.has("salary") && !jobJson.isNull("salary")) {
                jobJson.getString("salary")
            } else null

            val level = if (jobJson.has("level") && !jobJson.isNull("level")) {
                jobJson.getString("level")
            } else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            val format = if (jobJson.has("format") && !jobJson.isNull("format")) {
                jobJson.getString("format")
            } else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

            val url = if (jobJson.has("url") && !jobJson.isNull("url")) {
                jobJson.getString("url")
            } else if (jobJson.has("link") && !jobJson.isNull("link")) {
                jobJson.getString("link")
            } else "https://hirehi.ru"

            val description = if (jobJson.has("description") && !jobJson.isNull("description")) {
                jobJson.getString("description")
            } else null

            Job(
                id = id,
                title = title,
                company = company,
                salary = salary,
                level = level,
                format = format,
                url = url,
                description = description
            )
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–∞–∫–∞–Ω—Å–∏–∏: ${e.message}")
            null
        }
    }

    private fun saveJobsToJson(jobs: List<Job>, statistics: JobStatistics, filename: String) {
        try {
            val jsonArray = org.json.JSONArray()
            
            jobs.forEach { job ->
                val jobJson = org.json.JSONObject()
                jobJson.put("id", job.id)
                jobJson.put("title", job.title)
                jobJson.put("company", job.company)
                jobJson.put("salary", job.salary)
                jobJson.put("level", job.level)
                jobJson.put("format", job.format)
                jobJson.put("url", job.url)
                jobJson.put("description", job.description)
                jobJson.put("requirements", job.requirements.joinToString(" "))
                jsonArray.put(jobJson)
            }
            
            val result = org.json.JSONObject()
            result.put("jobs", jsonArray)
            result.put("total", jobs.size)
            result.put("timestamp", statistics.lastUpdated)
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            val statsJson = org.json.JSONObject()
            statsJson.put("totalJobs", statistics.totalJobs)
            statsJson.put("filteredJobs", statistics.filteredJobs)
            statsJson.put("lastUpdated", statistics.lastUpdated)
            val keywordsArray = org.json.JSONArray()
            statistics.keywords.forEach { keywordsArray.put(it) }
            statsJson.put("keywords", keywordsArray)
            result.put("statistics", statsJson)
            
            File(filename).writeText(result.toString(2), Charsets.UTF_8)
            println("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: $filename")
        } catch (e: Exception) {
            println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª $filename: ${e.message}")
        }
    }

    fun close() {
        scraper.close()
    }
}
