package com.hirehi.presentation.webserver

import com.hirehi.presentation.service.JobService
import io.ktor.server.application.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.server.plugins.contentnegotiation.*
import io.ktor.server.plugins.cors.routing.*
import io.ktor.server.response.*
import io.ktor.server.routing.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.http.*
import kotlinx.serialization.json.Json
import java.io.File

class WebServer {
    
    private val jobService = JobService()

    fun start(port: Int = 10000) {
        try {
            println("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $port...")
            
            val server = embeddedServer(Netty, port = port) {
                configureApplication()
            }
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            Thread {
                Thread.sleep(2000) // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                try {
                    val process = ProcessBuilder("xdg-open", "http://localhost:$port").start()
                    println("üåê –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                } catch (e: Exception) {
                    println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:$port –≤—Ä—É—á–Ω—É—é")
                }
            }.start()
            
            println("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:$port –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)
            server.start(wait = true)
            
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: ${e.message}")
            println("‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç")
        }
    }

    private fun Application.configureApplication() {
        install(ContentNegotiation) {
            json(Json {
                prettyPrint = true
                isLenient = true
            })
        }

        install(CORS) {
            anyHost()
            allowHeader("Content-Type")
            allowMethod(io.ktor.http.HttpMethod.Get)
            allowMethod(io.ktor.http.HttpMethod.Post)
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        routing {
            get("/") {
                val htmlFile = File("jobs_display.html")
                if (htmlFile.exists()) {
                    call.respondText(htmlFile.readText(), ContentType.Text.Html)
                } else {
                    call.respondText("HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", ContentType.Text.Plain)
                }
            }

            get("/api/jobs") {
                val jobs = jobService.loadJobsFromJson()
                call.respond(jobs)
            }

            get("/api/status") {
                val status = mapOf(
                    "status" to "ok",
                    "message" to "HireHi API is running",
                    "jobs_count" to jobService.loadJobsFromJson().size
                )
                call.respond(status)
            }
        }
    }

    fun close() {
        jobService.close()
    }
}
